import React, { createContext, useState, useContext, ReactNode } from 'react';

// Define all translations for the application
export const translations = {
  en: {
    // Common UI elements
    language: "English",
    changeLanguage: "Français",
    loading: "Loading...",
    error: "Error",
    success: "Success",
    save: "Save",
    cancel: "Cancel",
    confirm: "Confirm",
    back: "Back",
    next: "Next",
    view: "View",
    edit: "Edit",
    delete: "Delete",
    search: "Search",
    filter: "Filter",
    
    // Navigation
    home: "Home",
    leaderboard: "Leaderboard",
    statistics: "Statistics",
    upload: "Upload",
    admin: "Admin",
    login: "Login",
    logout: "Logout",
    dashboard: "Dashboard",
    
    // Upload form
    uploadTitle: "Upload BlazePod CSV Data",
    uploadDescription: "Select a CSV file with activity data",
    clickToUpload: "Click to upload CSV",
    dragAndDrop: "or drag and drop file here",
    processing: "Processing file...",
    serverProcessing: "Server-side CSV processing",
    recordsProcessed: "records processed",
    
    // Sessions
    sessionsOverview: "Sessions Overview",
    complete: "Complete",
    partial: "Partial",
    saving: "Saving...",
    saveCompleteSessions: "Save Complete Sessions",
    session: "Session",
    type: "Type",
    status: "Status",
    activities: "Activities",
    sessionStart: "Session Start",
    duration: "Duration",
    hitsMisses: "Hits/Misses",
    avgReaction: "Avg Reaction",
    completeSession: "Session",
    partialSession: "Partial Session",
    singleStation: "Single Station",
    
    // Error messages
    noSessionsToSave: "No sessions to save",
    noCompleteSessionsFound: "No complete sessions found",
    failedToSave: "Failed to save sessions",
    failedToUpload: "Failed to upload file",
    unknownError: "Unknown error occurred",
    uploadError: "An error occurred while uploading the file",
    savingError: "An error occurred while saving sessions",
    loginError: "Invalid username or password",
    
    // Success messages
    successfullySaved: "Successfully saved {count} sessions!",
    loginSuccess: "Login successful",
    
    // Stats and Leaderboard
    rank: "Rank",
    player: "Player",
    score: "Score",
    time: "Time",
    bestTime: "Best Time",
    totalSessions: "Total Sessions",
    averageScore: "Average Score",
    topPlayers: "Top Players",
    recentActivity: "Recent Activity",
    improvement: "Improvement",
    
    // Other
    unknown: "Unknown",
    seconds: "s",
    milliseconds: "ms",
    station: "Station",
    adminArea: "Admin Area",
    welcomeBack: "Welcome back",
    pleaseLogin: "Please login to continue",
    username: "Username",
    password: "Password",
    sessionDetails: "Session Details",
    activityBreakdown: "Activity Breakdown",
  },
  fr: {
    // Common UI elements
    language: "Français",
    changeLanguage: "English",
    loading: "Chargement...",
    error: "Erreur",
    success: "Succès",
    save: "Enregistrer",
    cancel: "Annuler",
    confirm: "Confirmer",
    back: "Retour",
    next: "Suivant",
    view: "Voir",
    edit: "Modifier",
    delete: "Supprimer",
    search: "Rechercher",
    filter: "Filtrer",
    
    // Navigation
    home: "Accueil",
    leaderboard: "Classement",
    statistics: "Statistiques",
    upload: "Télécharger",
    admin: "Admin",
    login: "Connexion",
    logout: "Déconnexion",
    dashboard: "Tableau de bord",
    
    // Upload form
    uploadTitle: "Télécharger les données CSV BlazePod",
    uploadDescription: "Sélectionnez un fichier CSV avec les données d'activité",
    clickToUpload: "Cliquez pour télécharger CSV",
    dragAndDrop: "ou glissez-déposez le fichier ici",
    processing: "Traitement du fichier...",
    serverProcessing: "Traitement CSV côté serveur",
    recordsProcessed: "enregistrements traités",
    
    // Sessions
    sessionsOverview: "Aperçu des sessions",
    complete: "Complète",
    partial: "Partielle",
    saving: "Enregistrement...",
    saveCompleteSessions: "Enregistrer les sessions complètes",
    session: "Session",
    type: "Type",
    status: "Statut",
    activities: "Activités",
    sessionStart: "Début de session",
    duration: "Durée",
    hitsMisses: "Réussites/Échecs",
    avgReaction: "Réaction moy.",
    completeSession: "Session",
    partialSession: "Session Partielle",
    singleStation: "Station Unique",
    
    // Error messages
    noSessionsToSave: "Aucune session à enregistrer",
    noCompleteSessionsFound: "Aucune session complète trouvée",
    failedToSave: "Échec de l'enregistrement des sessions",
    failedToUpload: "Échec du téléchargement du fichier",
    unknownError: "Une erreur inconnue s'est produite",
    uploadError: "Une erreur s'est produite lors du téléchargement du fichier",
    savingError: "Une erreur s'est produite lors de l'enregistrement des sessions",
    loginError: "Nom d'utilisateur ou mot de passe invalide",
    
    // Success messages
    successfullySaved: "{count} sessions enregistrées avec succès !",
    loginSuccess: "Connexion réussie",
    
    // Stats and Leaderboard
    rank: "Rang",
    player: "Joueur",
    score: "Score",
    time: "Temps",
    bestTime: "Meilleur Temps",
    totalSessions: "Sessions Totales",
    averageScore: "Score Moyen",
    topPlayers: "Meilleurs Joueurs",
    recentActivity: "Activité Récente",
    improvement: "Amélioration",
    
    // Other
    unknown: "Inconnu",
    seconds: "s",
    milliseconds: "ms",
    station: "Station",
    adminArea: "Zone d'administration",
    welcomeBack: "Bienvenue",
    pleaseLogin: "Veuillez vous connecter pour continuer",
    username: "Nom d'utilisateur",
    password: "Mot de passe",
    sessionDetails: "Détails de la session",
    activityBreakdown: "Répartition des activités",
  }
};

type LanguageContextType = {
  language: 'en' | 'fr';
  t: typeof translations.en;
  toggleLanguage: () => void;
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<'en' | 'fr'>('en'); // Default to English

  const toggleLanguage = () => {
    setLanguage(language === 'en' ? 'fr' : 'en');
  };

  // Get current language translations
  const t = translations[language];

  return (
    <LanguageContext.Provider value={{ language, t, toggleLanguage }}>
      {children}
    </LanguageContext.Provider>
  );
}

// Custom hook to use the language context
export function useLanguage() {
  const context = useContext(LanguageContext);
  
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  
  return context;
}